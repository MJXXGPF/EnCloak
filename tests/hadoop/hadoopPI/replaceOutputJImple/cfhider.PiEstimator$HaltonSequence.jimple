class cfhider.PiEstimator$HaltonSequence extends java.lang.Object
{
    static final int[] P;
    static final int[] K;
    public long index;
    public double[] x;
    public double[][] q;
    public int[][] d;

    void <init>(long)
    {
        cfhider.PiEstimator$HaltonSequence r0;
        long l0, l2, $l17, $l18, $l21, $l22, $l24;
        int i1, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i19, $i20, $i23, $i25, $i26;
        int[] $r1, $r2, $r4, $r6, $r8, $r12, $r13, $r14, $r16, $r21, $r23, $r24, $r26, $r27, $r30;
        double[] $r3, $r10, $r15, $r18, $r20, $r28, $r32;
        double[][] $r5, $r9, $r17, $r19, $r31;
        int[][] $r7, $r11, $r22, $r25, $r29;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: cfhider.PiEstimator$HaltonSequence;
        l0 := @parameter0: long;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<cfhider.PiEstimator$HaltonSequence: long index> = l0;
        $r2 = <cfhider.PiEstimator$HaltonSequence: int[] K>;
        $i4 = lengthof $r2;
        $r3 = newarray (double)[$i4];
        r0.<cfhider.PiEstimator$HaltonSequence: double[] x> = $r3;
        $r4 = <cfhider.PiEstimator$HaltonSequence: int[] K>;
        $i5 = lengthof $r4;
        $r5 = newarray (double[])[$i5];
        r0.<cfhider.PiEstimator$HaltonSequence: double[][] q> = $r5;
        $r6 = <cfhider.PiEstimator$HaltonSequence: int[] K>;
        $i6 = lengthof $r6;
        $r7 = newarray (int[])[$i6];
        r0.<cfhider.PiEstimator$HaltonSequence: int[][] d> = $r7;
        i1 = 0;

     label0:
        $r8 = <cfhider.PiEstimator$HaltonSequence: int[] K>;
        $i7 = lengthof $r8;
        if i1 >= $i7 goto label1;

        $r9 = r0.<cfhider.PiEstimator$HaltonSequence: double[][] q>;
        $r1 = <cfhider.PiEstimator$HaltonSequence: int[] K>;
        $i8 = $r1[i1];
        $r10 = newarray (double)[$i8];
        $r9[i1] = $r10;
        $r11 = r0.<cfhider.PiEstimator$HaltonSequence: int[][] d>;
        $r12 = <cfhider.PiEstimator$HaltonSequence: int[] K>;
        $i9 = $r12[i1];
        $r13 = newarray (int)[$i9];
        $r11[i1] = $r13;
        i1 = i1 + 1;
        goto label0;

     label1:
        i10 = 0;

     label2:
        $r14 = <cfhider.PiEstimator$HaltonSequence: int[] K>;
        $i11 = lengthof $r14;
        if i10 >= $i11 goto label7;

        l2 = r0.<cfhider.PiEstimator$HaltonSequence: long index>;
        $r15 = r0.<cfhider.PiEstimator$HaltonSequence: double[] x>;
        $r15[i10] = 0.0;
        i3 = 0;

     label3:
        $r16 = <cfhider.PiEstimator$HaltonSequence: int[] K>;
        $i12 = $r16[i10];
        if i3 >= $i12 goto label6;

        $r17 = r0.<cfhider.PiEstimator$HaltonSequence: double[][] q>;
        $r18 = $r17[i10];
        $i13 = i3;
        if i3 != 0 goto label4;

        $d0 = 1.0;
        goto label5;

     label4:
        $r19 = r0.<cfhider.PiEstimator$HaltonSequence: double[][] q>;
        $r20 = $r19[i10];
        $i14 = i3 - 1;
        $d0 = $r20[$i14];

     label5:
        $r21 = <cfhider.PiEstimator$HaltonSequence: int[] P>;
        $i15 = $r21[i10];
        $d1 = (double) $i15;
        $d2 = $d0 / $d1;
        $r18[$i13] = $d2;
        $r22 = r0.<cfhider.PiEstimator$HaltonSequence: int[][] d>;
        $r23 = $r22[i10];
        $r24 = <cfhider.PiEstimator$HaltonSequence: int[] P>;
        $i16 = $r24[i10];
        $l17 = (long) $i16;
        $l18 = l2 % $l17;
        $i19 = (int) $l18;
        $r23[i3] = $i19;
        $r25 = r0.<cfhider.PiEstimator$HaltonSequence: int[][] d>;
        $r26 = $r25[i10];
        $i20 = $r26[i3];
        $l21 = (long) $i20;
        $l22 = l2 - $l21;
        $r27 = <cfhider.PiEstimator$HaltonSequence: int[] P>;
        $i23 = $r27[i10];
        $l24 = (long) $i23;
        l2 = $l22 / $l24;
        $r28 = r0.<cfhider.PiEstimator$HaltonSequence: double[] x>;
        $i25 = i10;
        $d3 = $r28[$i25];
        $r29 = r0.<cfhider.PiEstimator$HaltonSequence: int[][] d>;
        $r30 = $r29[i10];
        $i26 = $r30[i3];
        $d4 = (double) $i26;
        $r31 = r0.<cfhider.PiEstimator$HaltonSequence: double[][] q>;
        $r32 = $r31[i10];
        $d5 = $r32[i3];
        $d6 = $d4 * $d5;
        $d7 = $d3 + $d6;
        $r28[$i25] = $d7;
        i3 = i3 + 1;
        goto label3;

     label6:
        i10 = i10 + 1;
        goto label2;

     label7:
        return;
    }

    double[] nextPoint()
    {
        cfhider.PiEstimator$HaltonSequence r0, $r1;
        int i0, i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        long $l2, $l3;
        int[] $r2, $r3, $r5, $r10, $r11, $r13;
        int[][] $r4, $r9, $r12;
        double[] $r6, $r8, $r14, $r16, $r17;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        double[][] $r7, $r15;

        r0 := @this: cfhider.PiEstimator$HaltonSequence;
        $r1 = r0;
        $l2 = $r1.<cfhider.PiEstimator$HaltonSequence: long index>;
        $l3 = $l2 + 1L;
        $r1.<cfhider.PiEstimator$HaltonSequence: long index> = $l3;
        i0 = 0;

     label0:
        $r2 = <cfhider.PiEstimator$HaltonSequence: int[] K>;
        $i4 = lengthof $r2;
        if i0 >= $i4 goto label6;

        i1 = 0;

     label1:
        $r3 = <cfhider.PiEstimator$HaltonSequence: int[] K>;
        $i5 = $r3[i0];
        if i1 >= $i5 goto label5;

        $r4 = r0.<cfhider.PiEstimator$HaltonSequence: int[][] d>;
        $r5 = $r4[i0];
        $i6 = i1;
        $i7 = $r5[$i6];
        $i8 = $i7 + 1;
        $r5[$i6] = $i8;
        $r6 = r0.<cfhider.PiEstimator$HaltonSequence: double[] x>;
        $i9 = i0;
        $d0 = $r6[$i9];
        $r7 = r0.<cfhider.PiEstimator$HaltonSequence: double[][] q>;
        $r8 = $r7[i0];
        $d1 = $r8[i1];
        $d2 = $d0 + $d1;
        $r6[$i9] = $d2;
        $r9 = r0.<cfhider.PiEstimator$HaltonSequence: int[][] d>;
        $r10 = $r9[i0];
        $i10 = $r10[i1];
        $r11 = <cfhider.PiEstimator$HaltonSequence: int[] P>;
        $i11 = $r11[i0];
        if $i10 >= $i11 goto label2;

        goto label5;

     label2:
        $r12 = r0.<cfhider.PiEstimator$HaltonSequence: int[][] d>;
        $r13 = $r12[i0];
        $r13[i1] = 0;
        $r14 = r0.<cfhider.PiEstimator$HaltonSequence: double[] x>;
        $i12 = i0;
        $d3 = $r14[$i12];
        if i1 != 0 goto label3;

        $d4 = 1.0;
        goto label4;

     label3:
        $r15 = r0.<cfhider.PiEstimator$HaltonSequence: double[][] q>;
        $r16 = $r15[i0];
        $i13 = i1 - 1;
        $d4 = $r16[$i13];

     label4:
        $d5 = $d3 - $d4;
        $r14[$i12] = $d5;
        i1 = i1 + 1;
        goto label1;

     label5:
        i0 = i0 + 1;
        goto label0;

     label6:
        $r17 = r0.<cfhider.PiEstimator$HaltonSequence: double[] x>;
        return $r17;
    }

    static void <clinit>()
    {
        int[] $r0, $r1;

        $r0 = newarray (int)[2];
        $r0[0] = 2;
        $r0[1] = 3;
        <cfhider.PiEstimator$HaltonSequence: int[] P> = $r0;
        $r1 = newarray (int)[2];
        $r1[0] = 63;
        $r1[1] = 40;
        <cfhider.PiEstimator$HaltonSequence: int[] K> = $r1;
        return;
    }
}
