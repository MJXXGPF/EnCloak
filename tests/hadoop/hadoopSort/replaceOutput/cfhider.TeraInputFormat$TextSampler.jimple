class cfhider.TeraInputFormat$TextSampler extends java.lang.Object implements org.apache.hadoop.util.IndexedSortable
{
    private java.util.ArrayList records;
    public java.lang.String Cuuid;

    void <init>()
    {
        cfhider.TeraInputFormat$TextSampler r0;
        java.util.ArrayList $r1;

        r0 := @this: cfhider.TeraInputFormat$TextSampler;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records> = $r1;
        return;
    }

    public int compare(int, int)
    {
        cfhider.TeraInputFormat$TextSampler r0;
        int i0, i1, $i2;
        org.apache.hadoop.io.Text r1, r2;
        java.util.ArrayList $r3, $r5;
        java.lang.Object $r4, $r6;

        r0 := @this: cfhider.TeraInputFormat$TextSampler;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r3 = r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records>;
        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);
        r1 = (org.apache.hadoop.io.Text) $r4;
        $r5 = r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records>;
        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);
        r2 = (org.apache.hadoop.io.Text) $r6;
        $i2 = virtualinvoke r1.<org.apache.hadoop.io.Text: int compareTo(org.apache.hadoop.io.BinaryComparable)>(r2);
        return $i2;
    }

    public void swap(int, int)
    {
        cfhider.TeraInputFormat$TextSampler r0;
        int i0, i1;
        org.apache.hadoop.io.Text r1, r2;
        java.util.ArrayList $r3, $r5, $r7, $r9;
        java.lang.Object $r4, $r6;

        r0 := @this: cfhider.TeraInputFormat$TextSampler;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r3 = r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records>;
        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);
        r1 = (org.apache.hadoop.io.Text) $r4;
        $r5 = r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records>;
        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);
        r2 = (org.apache.hadoop.io.Text) $r6;
        $r7 = r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records>;
        virtualinvoke $r7.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i1, r1);
        $r9 = r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records>;
        virtualinvoke $r9.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i0, r2);
        return;
    }

    public void addKey(org.apache.hadoop.io.Text)
    {
        cfhider.TeraInputFormat$TextSampler r0;
        org.apache.hadoop.io.Text r1, $r2;
        java.util.ArrayList $r3;

        r0 := @this: cfhider.TeraInputFormat$TextSampler;
        r1 := @parameter0: org.apache.hadoop.io.Text;
        $r3 = r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records>;
        $r2 = new org.apache.hadoop.io.Text;
        specialinvoke $r2.<org.apache.hadoop.io.Text: void <init>(org.apache.hadoop.io.Text)>(r1);
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);
        return;
    }

    org.apache.hadoop.io.Text[] createPartitions(int)
    {
        cfhider.TeraInputFormat$TextSampler r0;
        int i0, i1, i2, $i3, $i4, $i5, $i7;
        java.lang.StringBuilder $r1, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r22, $r23, $r24;
        double d0, $d1, $d2, $d3, $d4;
        org.apache.hadoop.io.Text[] r2;
        java.util.ArrayList $r3, $r20, $r27;
        java.io.PrintStream $r4, $r21, $r26, $r30;
        java.lang.String $r10, $r18, $r25;
        java.lang.IllegalArgumentException $r11;
        org.apache.hadoop.util.QuickSort $r19;
        long $l6;
        java.lang.Object $r28;
        org.apache.hadoop.io.Text $r29;

        r0 := @this: cfhider.TeraInputFormat$TextSampler;
        i0 := @parameter0: int;
        $r3 = r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records>;
        i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();
        $r4 = <java.lang.System: java.io.PrintStream out>;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Making ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" records");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r10);
        if i0 <= i1 goto label0;

        $r11 = new java.lang.IllegalArgumentException;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested more partitions than input keys (");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);
        throw $r11;

     label0:
        $r19 = new org.apache.hadoop.util.QuickSort;
        specialinvoke $r19.<org.apache.hadoop.util.QuickSort: void <init>()>();
        $r20 = r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records>;
        $i3 = virtualinvoke $r20.<java.util.ArrayList: int size()>();
        virtualinvoke $r19.<org.apache.hadoop.util.QuickSort: void sort(org.apache.hadoop.util.IndexedSortable,int,int)>(r0, 0, $i3);
        $d1 = (double) i1;
        $d2 = (double) i0;
        d0 = $d1 / $d2;
        $r21 = <java.lang.System: java.io.PrintStream out>;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Step size is ");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r25);
        $i4 = i0 - 1;
        r2 = newarray (org.apache.hadoop.io.Text)[$i4];
        $r26 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>("A");
        i2 = 1;

     label1:
        if i2 >= i0 goto label2;

        $i5 = i2 - 1;
        $r27 = r0.<cfhider.TeraInputFormat$TextSampler: java.util.ArrayList records>;
        $d3 = (double) i2;
        $d4 = d0 * $d3;
        $l6 = staticinvoke <java.lang.Math: long round(double)>($d4);
        $i7 = (int) $l6;
        $r28 = virtualinvoke $r27.<java.util.ArrayList: java.lang.Object get(int)>($i7);
        $r29 = (org.apache.hadoop.io.Text) $r28;
        r2[$i5] = $r29;
        i2 = i2 + 1;
        goto label1;

     label2:
        $r30 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>("B");
        return r2;
    }
}
